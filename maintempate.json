{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
  "adminUserName": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machines"
      }
    },
  "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine"
      }
    },
  "applicationProtocols": {
               "type": "string",
               "defaultValue": "http-https",
               "metadata": {
                    "description": "The protocol(s) used by your application."
               },
               "allowedValues" : [
                    "http",
                    "https",
                    "http-https",
                    "https-offload"
               ]
          },
  "applicationAddress": {
               "type": "string",
               "metadata": {
                    "description": "The public IP address or DNS FQDN of the application that this WAF will protect."
               }
          },
  "applicationServiceFqdn": {
               "type": "string",
               "defaultValue": "NOT_SPECIFIED",
               "metadata": {
                    "description": "If deploying in front of an Azure App Service, the FQDN of the public application."
               }
          },
  "applicationPort": {
               "type": "string",
               "defaultValue": "80",
               "metadata": {
                    "description": "If deploying an HTTP application, the port on which your service listens for unencrypted traffic. This field is not required when deploying https only."
               }
          },
  "applicationSecurePort": {
               "type": "string",
               "defaultValue": "443",
               "metadata": {
                    "description": "If deploying an HTTPS application, the port on which your service listens for encrypted traffic. This field is not required when deploying http only."
               }
          },
  "sslCert": {
               "type": "string",
               "defaultValue": "NOT_SPECIFIED",
               "metadata": {
                    "description": "The SSL certificate .pfx file corresponding to public facing VIP."
               }
          },
  "sslPswd": {
               "type": "securestring",
               "defaultValue": "NOT_SPECIFIED",
               "metadata": {
                    "description": "The SSL certificate .pfx file corresponding to public facing VIP."
               }
          },
  "applicationType": {
               "type": "string",
               "defaultValue": "apache",
               "metadata": {
                    "description": "Is your application running on a Linux OS or a Windows OS?"
               },     
               "allowedValues": [
                    "apache",
                    "iis",
                    "nginx",
                    "magento",
                    "woo",
                    "big",
                    "volusion",
                    "miva",
                    "shopify",
                    "demandware",
                    "os",
                    "shop",
                    "wordpress",
                    "drupal",
                    "joomla",
                    "blogger",
                    "vbulletin",
                    "expression",
                    "dnn",
                    "adobecq",
                    "ektron",
                    "sharepoint",
                    "cms"
               ]
          },
  "blockingLevel": {
               "type": "string",
               "defaultValue": "medium",
               "metadata": {
                    "description": "Please select how aggressive you would like the blocking level of this WAF to be.  Remember that the more aggressive the blocking level, the more potential there is for false-positives that the WAF might detect. Select Custom to specify your own security policy below."
               },    
               "allowedValues": [
                    "low",
                    "medium",
                    "high",
                    "off",
                    "custom"
               ]
          },
  "customPolicy": {
               "type": "string",
               "defaultValue": "NOT_SPECIFIED",
               "metadata": {
                    "description": "Specify the publicly available URL of a custom ASM security policy in XML format. This policy will be applied in place of the standard High/Medium/Low policy as indicated above."
               }
          }
  },
  "variables": {
    "imagePublisher": "Canonical",
    "imageOffer": "UbuntuServer",
    "imageSKU": "14.04.2-LTS",
    "vmSize": "Standard_A0",
    "publicIPAddressName": "[concat(variables('vmName'),'.', uniqueString(resourceGroup().id)) ]",
    "vmName": "f5Agent",
    "nicName": "[concat(variables('vmName'),'-nic')]",
    "storageAccountType": "Standard_LRS",
    "newStorageAccountName": "[concat(tolower(variables('vmName'),uniqueString(resourceGroup().id)),'stor')]",
    "publicIPAddressType": "Dynamic",
    "addressPrefix": "10.0.0.0/16",
    "virtualNetworkName": "f5Vnet",
    "subnetName": "agentSubnet",
    "subnetPrefix": "10.0.0.0/24",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "vmStorageAccountContainerName": "vhds",
    "OSDiskName": "osdiskforscrapy",
    "baseUrl": "https://raw.githubusercontent.com/gregcoward/whirlwind/master/",
    "commandArgs": "[concat(' -p ',variables('appPort'),' -e ', variables('entityId'),' -d ', parameters('authFqdn'),' -a ', parameters('authIp'),' -f ', parameters('domainfqdn'),' -c ', parameters('sslCert'),' -w ', parameters('sslPswd'),' -x ', parameters('adminPassword'),' -u ', variables('iappUrl'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[parameters('nicName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('publicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[parameters('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk1",
            "vhd": {
              "uri": "[concat('http://',parameters('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',parameters('nicName'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/installscrapy')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/scrapy-on-ubuntu/scrapy-install-ubuntu.sh",
            "[parameters('spiderUri')]"
          ],
          "commandToExecute": "[concat('sh scrapy-install-ubuntu.sh ', parameters('spiderName'))]"
        }
      }
    }
  ]
}